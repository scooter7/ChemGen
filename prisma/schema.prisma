// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // As chosen during prisma init
  url      = env("DATABASE_URL")
}

// Enum for processing status
enum ProcessingStatus {
  UPLOADED
  PROCESSING
  INDEXED
  FAILED
}

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String?  @unique
  emailVerified     DateTime?
  image             String?  
  hashedPassword    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Profile details
  department        String?
  title             String?
  languages         String[]
  recruitmentRegion String?

  // Relations
  accounts          Account[]
  sessions          Session[]
  contentGenerations ContentGeneration[]
  sourceMaterials   SourceMaterial[]
  imageResources    ImageResource[] // Relation to uploaded images
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ContentGeneration {
  id            String @id @default(cuid())
  userId        String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  promptText        String   @db.Text
  audience          String?
  mediaType         String?
  textCountTarget   Int?
  textCountUnit     String?
  archetypesConfig  Json?
  sourceMaterialIds String[] // Consider changing this to a many-to-many relation with SourceMaterial if these IDs map to SourceMaterial.id

  generatedSubject  String?  @db.Text
  generatedHeader   String?  @db.Text
  generatedBodyHtml String?  @db.Text
  generatedBodyText String?  @db.Text
  justification     String?  @db.Text

  parentGenerationId String?
  parentGeneration   ContentGeneration? @relation("ContentVersions", fields: [parentGenerationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childGenerations   ContentGeneration[] @relation("ContentVersions")
}

model SourceMaterial {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName        String
  fileType        String?
  storagePath     String
  description     String?  @db.Text
  uploadedAt      DateTime @default(now())
  fileSize        Int?     
  
  status          ProcessingStatus @default(UPLOADED)
  processedAt     DateTime?        

  chunks          DocumentChunk[] 
}

model DocumentChunk {
  id               String   @id @default(cuid())
  sourceMaterialId String
  sourceMaterial   SourceMaterial @relation(fields: [sourceMaterialId], references: [id], onDelete: Cascade)
  
  content          String   @db.Text 
  embedding        Unsupported("vector(768)")? // For text-embedding-004 (768 dimensions)
  metadata         Json?    

  createdAt        DateTime @default(now())

  @@index([sourceMaterialId])
  // For pgvector similarity search on DocumentChunk.embedding:
  // CREATE INDEX IF NOT EXISTS idx_document_chunk_embedding_cosine 
  // ON "DocumentChunk" 
  // USING hnsw (embedding vector_cosine_ops); 
  // (Run manually in Supabase SQL Editor after migration)
}

model ImageResource {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fileName              String
  fileType              String
  storagePath           String
  publicUrl             String?
  
  aiGeneratedDescription String?  @db.Text
  embedding             Unsupported("vector(768)")? // <<< ADDED: Embedding for the aiGeneratedDescription (using text-embedding-004 dimensions)

  uploadedAt            DateTime @default(now())
  updatedAt             DateTime @updatedAt

  width                 Int?
  height                Int?
  fileSize              Int?

  @@index([userId])
  // For pgvector similarity search on ImageResource.embedding:
  // CREATE INDEX IF NOT EXISTS idx_imageresource_embedding_cosine
  // ON "ImageResource"
  // USING hnsw (embedding vector_cosine_ops);
  // (Run manually in Supabase SQL Editor after migration)
}